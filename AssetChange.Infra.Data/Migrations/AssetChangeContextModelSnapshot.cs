// <auto-generated />
using System;
using AssetChange.Infra.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssetChange.Infra.Data.Migrations
{
    [DbContext(typeof(AssetChangeContext))]
    partial class AssetChangeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AssetChange.Domain.Entities.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ChartPreviousClose")
                        .HasColumnType("money");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<string>("DataGranularity")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar");

                    b.Property<string>("ExchangeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("ExchangeTimezoneName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("FirstTradeDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Gmtoffset")
                        .HasColumnType("int");

                    b.Property<DateTime>("ImportedIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("InstrumentType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<decimal>("PreviousClose")
                        .HasColumnType("money");

                    b.Property<int>("PriceHint")
                        .HasColumnType("int");

                    b.Property<string>("Range")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar");

                    b.Property<decimal>("RegularMarketPrice")
                        .HasColumnType("money");

                    b.Property<DateTime>("RegularMarketTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Scale")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar");

                    b.Property<string>("ValidRanges")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Asset", (string)null);
                });

            modelBuilder.Entity("AssetChange.Domain.Entities.AssetTradingDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("OpeningValue")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetTradingDate", (string)null);
                });

            modelBuilder.Entity("AssetChange.Domain.Entities.CurrentTradingPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime");

                    b.Property<int>("Gmtoffset")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("CurrentTradingPeriod", (string)null);
                });

            modelBuilder.Entity("AssetChange.Domain.Entities.AssetTradingDate", b =>
                {
                    b.HasOne("AssetChange.Domain.Entities.Asset", "Asset")
                        .WithMany("AssetTradingDates")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("AssetChange.Domain.Entities.CurrentTradingPeriod", b =>
                {
                    b.HasOne("AssetChange.Domain.Entities.Asset", "Asset")
                        .WithMany("CurrentTradingPeriods")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("AssetChange.Domain.Entities.Asset", b =>
                {
                    b.Navigation("AssetTradingDates");

                    b.Navigation("CurrentTradingPeriods");
                });
#pragma warning restore 612, 618
        }
    }
}
